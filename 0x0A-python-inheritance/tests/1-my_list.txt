======================================
Test Cases for Use in 1-my_list.py
======================================

Testing for class "MyList(list)" and method "print_sorted(self)".

print_sorted(self) sorts the elements of a given list and prints the list.

Only elements of 'int' type are allowed to be passed to the method.

     >>> MyList = __import__('1-my_list').MyList

-------------
Correct Usage
-------------
Provided by Holberton School.
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, 3, 5]

::
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]

::
	>>> print(my_list)
	[1, 4, 2, 3, 5]

::
	>>> my_list.append(-1)
	>>> my_list.append(-2)
	>>> my_list.append(-5)
	>>> print(my_list)
	[1, 4, 2, 3, 5, -1, -2, -5]

::
	>>> my_list.print_sorted()
	[-5, -2, -1, 1, 2, 3, 4, 5]

Class inheritance.
      >>> issubclass(MyList, list)
      True

Type test.
     >>> type(my_list)
     <class '1-my_list.MyList'>

print_sorted defined.
     >>> 'print_sorted' in dir(MyList)
     True

----------
Exceptions
----------

Check for all elements to by of int type.
      >>> def test_i(tests=[]):
      ...     for test in tests:
      ...     	  try:
      ...		test.print_sorted()
      ... 	  except Exception as e:
      ...         	print("[{}] {}".format(e.__class__.__name__, e))
      ...

      >>> tests = [MyList([1, "a"]), MyList(["a", "b", "c"]), None, MyList([[1], [2]]), MyList([1, -1, 3.4])]
      >>> test_i(tests)
      [TypeError] unorderable types: str() < int()
      ['a', 'b', 'c']
      [AttributeError] 'NoneType' object has no attribute 'print_sorted'
      [[1], [2]]
      [-1, 1, 3.4]
