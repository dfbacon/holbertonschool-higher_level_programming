Holberton School
My planning
My projects
My concepts
My batchmates
QA reviews I can make
My Captain's Logs
My Officers
My Speakers of the day
My Servers
My profile
You just released the optional tasks of this project. Have fun!
0x06. Python - Test-driven development
 Higher-level programming ― Python

 by Guillaume, Full stack engineer

 Ongoing project - started 01-17-2017, must end by 01-18-2017 (in about 13 hours) - you're 0% done.

 QA review fully automated.

Gif

Readme

Read the chapter doctest — Test interactive Python examples until 26.2.3.7. Warnings included and doctest – Testing through documentation.

Important notice on intranet checks for Python projects

Starting from today:

Based on the requirements of each task, you should always write the documentation (module(s) + function(s)) and tests first, before you actually code anything
The intranet checks for Python projects won't be released before their first deadline, in order for you to focus more on TDD and think about all possible cases
We strongly encourage you to work together on tests, so that you don't miss any edge case
Don't trust the user, always think about all possible edge cases
What you should learn from this project

At the end of this project you are expected to be able to explain to anyone, without the help of Google:

Why Python programming is awesome (don’t forget to tweet today, with the hashtag #pythoniscool :))
What's an interactive test
Why tests are important
How to write Docstrings to create tests
How to write documentation for each module and function
What are the basic optio flags to create tests
How to find edge cases
Requirements for Python scripts

Allowed editors: vi, vim, emacs
All your files will be interpreted/compiled on Ubuntu 14.04 LTS using python3 (version 3.4.3)
All your files should end with a new line
The first line of all your files should be exactly #!/usr/bin/python3
A README.md file, at the root of the folder of the project, is mandatory
Your code should use the PEP 8 style
All your files must be executable
The length of your files will be tested using wc
Requirements for Python test cases

Allowed editors: vi, vim, emacs
All your files should end with a new line
All your test files should be inside a folder tests
All your test files should be text files (extension: .txt)
All your tests should be executed by using this command: python3 -m doctest ./tests/*
example: guillaume@ubuntu:~/0x06$ python3 -m doctest -v ./tests/0-add_integer.txt
All your modules should have a documentation (python3 -c 'print(__import__("my_module").__doc__)')
All your functions should have a documentation (python3 -c 'print(__import__("my_module").my_function.__doc__)')
We strongly encourage you to work together on test cases, so that you don't miss any edge case
Tasks
  Done?  
Help!
0. Integers addition mandatory

Write a function that adds 2 integers.

Prototype: def add_integer(a, b):
a and b must be integers or floats, otherwise raise a TypeError exception with the message a must be an integer or b must be an integer
a and b must be first casted to integers if they are float
Returns an integer: the addition of a and b
You are not allowed to import any module
guillaume@ubuntu:~/0x06$ cat 0-main.py
#!/usr/bin/python3
add_integer = __import__('0-add_integer').add_integer

print(add_integer(1, 2))
print(add_integer(100, -2))
print(add_integer(100.3, -2))
try:
    print(add_integer(4, "School"))
except Exception as e:
    print(e)

guillaume@ubuntu:~/0x06$ ./0-main.py
3
98
98
b must be an integer
guillaume@ubuntu:~/0x06$ python3 -m doctest -v ./tests/0-add_integer.txt | tail -2
9 passed and 0 failed.
Test passed.
guillaume@ubuntu:~/0x06$ python3 -c 'print(__import__("0-add_integer").__doc__)' | wc -l
5
guillaume@ubuntu:~/0x06$ python3 -c 'print(__import__("0-add_integer").add_integer.__doc__)' | wc -l
3
guillaume@ubuntu:~/0x06$ 
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x06-python-test_driven_development
File: 0-add_integer.py, tests/0-add_integer.txt
  Done?  
Help!
1. Arguments multiplication mandatory

Write test cases for the module 1-mul.py

guillaume@ubuntu:~/0x06$ cat 1-mul.py
#!/usr/bin/python3
"""
This is the "Multiplication" module.

The Multiplication module supplies a simple function \
to multiply 2 Python variables.
"""


def mul(a, b):
    """Return the multiplication of 2 arguments
    """
    return a * b

guillaume@ubuntu:~/0x06$ python3 -m doctest -v ./tests/1-mul.txt | tail -2
9 passed and 0 failed.
Test passed.
guillaume@ubuntu:~/0x06$ 
Note: you might have a different number of tests than in the above example. As usual, your tests should cover all possible cases.

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x06-python-test_driven_development
File: tests/1-mul.txt
  Done?  
Help!
2. Divide a matrix mandatory

Write a function that divides all elements of a matrix.

Prototype: def matrix_divided(matrix, div):
matrix must be an array of arrays (list of lists) of integers or floats, otherwise raise a TypeError exception with the message matrix must be a matrix (list of lists) of integers/floats
Each row of the matrix must be of the same size, otherwise raise a TypeError exception with the message Each row of the matrix must have the same size
div can't be equal to 0, otherwise raise a ZeroDivisionError exception with the message division by zero
All elements of the matrix should be divided by div, rounded to 2 decimal places
Returns a new matrix
You are not allowed to import any module
guillaume@ubuntu:~/0x06$ cat 2-main.py
#!/usr/bin/python3
matrix_divided = __import__('2-matrix_divided').matrix_divided

matrix = [
    [1, 2, 3],
    [4, 5, 6]
]
print(matrix_divided(matrix, 3))
print(matrix)

guillaume@ubuntu:~/0x06$ ./2-main.py
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
[[1, 2, 3], [4, 5, 6]]
guillaume@ubuntu:~/0x06$ python3 -m doctest -v ./tests/2-matrix_divided.txt | tail -2
5 passed and 0 failed.
Test passed.
guillaume@ubuntu:~/0x06$ 
Note: you might have a different number of tests than in the above example. As usual, your tests should cover all possible cases.

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x06-python-test_driven_development
File: 2-matrix_divided.py, tests/2-matrix_divided.txt
  Done?  
Help!
3. Say my name mandatory

Write a function that prints "My name is "

Prototype: def say_my_name(first_name, last_name=""):
first_name and last_name must be strings otherwise, raise a TypeError exception with the message first_name must be a string or last_name must be a string
You are not allowed to import any module
guillaume@ubuntu:~/0x06$ cat 3-main.py
#!/usr/bin/python3
say_my_name = __import__('3-say_my_name').say_my_name

say_my_name("John", "Smith")
say_my_name("Walter", "White")
say_my_name("Bob")
say_my_name("Bob", 12)

guillaume@ubuntu:~/0x06$ ./3-main.py | cat -e
My name is John Smith$
My name is Walter White$
My name is Bob $
last_name must be a string$
guillaume@ubuntu:~/0x06$ python3 -m doctest -v ./tests/3-say_my_name.txt | tail -2
5 passed and 0 failed.
Test passed.
guillaume@ubuntu:~/0x06$ 
Note: you might have a different number of tests than in the above example. As usual, your tests should cover all possible cases.

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x06-python-test_driven_development
File: 3-say_my_name.py, tests/3-say_my_name.txt
  Done?  
Help!
4. Print square mandatory

Write a function that prints a square with the character #.

Prototype: def print_square(size):
size is the size length of the square
size must be an integer, otherwise raise a TypeError exception with the message size must be an integer
if size is less than 0, raise a ValueError exception with the message size must be >= 0
if size is a float and is less than 0, raise a TypeError exception with the message size must be an integer
You are not allowed to import any module
guillaume@ubuntu:~/0x06$ cat 4-main.py
#!/usr/bin/python3
print_square = __import__('4-print_square').print_square

print_square(4)
print("")
print_square(10)
print("")
print_square(0)
print("")
print_square(1)
print("")
try:
    print_square(-1)
except Exception as e:
    print(e)
print("")

guillaume@ubuntu:~/0x06$ ./4-main.py
####
####
####
####

##########
##########
##########
##########
##########
##########
##########
##########
##########
##########


#

size must be >= 0

guillaume@ubuntu:~/0x06$ python3 -m doctest ./tests/4-print_square.txt
guillaume@ubuntu:~/0x06$ 
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x06-python-test_driven_development
File: 4-print_square.py, tests/4-print_square.txt
  Done?  
Help!
5. Text indentation mandatory

Write a function that prints a text with 2 new lines after each of those characters: ., ? and :

Prototype: def text_indentation(text):
text must be a string, otherwise raise a TypeError exception with the message text must be a string
There should be no space at the beginning or at the end of each printed line
You are not allowed to import any module
guillaume@ubuntu:~/0x06$ cat 5-main.py
#!/usr/bin/python3
text_indentation = __import__('5-text_indentation').text_indentation

text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? \
Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: \
Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. \
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum \
rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo \
stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum \
cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio \
beatiorem! Iam ruinas videres.""")

guillaume@ubuntu:~/0x06$ ./5-main.py | cat -e
Lorem ipsum dolor sit amet, consectetur adipiscing elit.$
$
Quonam modo?$
$
Utrum igitur tibi litteram videor an totas paginas commovere?$
$
Non autem hoc:$
$
igitur ne illud quidem.$
$
Fortasse id optimum, sed ubi illud:$
$
Plus semper voluptatis?$
$
Teneo, inquit, finem illi videri nihil dolere.$
$
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.$
$
Si id dicis, vicimus.$
$
Inde sermone vario sex illa a Dipylo stadia confecimus.$
$
Sin aliud quid voles, postea.$
$
Quae animi affectio suum cuique tribuens atque hanc, quam dico.$
$
Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres.$
$
guillaume@ubuntu:~/0x06$ python3 -m doctest ./tests/5-text_indentation.txt
guillaume@ubuntu:~/0x06$ 
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x06-python-test_driven_development
File: 5-text_indentation.py, tests/5-text_indentation.txt
  Done?  
Help!
6. Matrix multiplication #advanced

Write a function that multiplies 2 matrices:

Read: Matrix multiplication

Prototype: def matrix_mul(m_a, m_b):

m_a and m_b must be an list of lists of integers or floats

if m_a or m_b us not a list: raise a TypeError exception with the message m_a must be a list or m_b must be a list
if m_a or m_b is empty: raise a ValueError exception with the message m_a can't be empty or m_b can't be empty
if one element of those two lists is not an integer or a float: raise a TypeError exception with the message m_a should contain only integers or floats or m_b should contain only integers or floats
if m_a or m_b is not a rectangle (all 'rows' should be of the same size): raise a TypeError exception with the message each row of m_a must should be of the same size or each row of m_b must should be of the same size
If m_a and m_b can't be multiplied: raise a ValueError exception with the message m_a and m_b can't be multiplied

You are not allowed to import any module

guillaume@ubuntu:~/0x06$ cat 100-main.py
#!/usr/bin/python3
matrix_mul = __import__('100-matrix_mul').matrix_mul

print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
print(matrix_mul([[1, 2]], [[3, 4], [5, 6]]))

guillaume@ubuntu:~/0x06$ ./100-main.py 
[[7, 10], [15, 22]]
[[13, 16]]
guillaume@ubuntu:~/0x06$ python3 -m doctest -v ./tests/100-matrix_mul.txt | tail -2
6 passed and 0 failed.
Test passed.
guillaume@ubuntu:~/0x06$ 
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x06-python-test_driven_development
File: 100-matrix_mul.py, tests/100-matrix_mul.txt
  Done?  
Help!
7. Lazy matrix multiplication #advanced

Write a function that multiplies 2 matrices by using the module NumPy

To install it: pip3 install numpy

Prototype: def lazy_matrix_mul(m_a, m_b):
Test cases should be the same as 100-matrix_mul but with new exception type/message
guillaume@ubuntu:~/0x06$ cat 101-main.py
#!/usr/bin/python3
lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))

guillaume@ubuntu:~/0x06$ ./101-main.py 
[[ 7 10]
 [15 22]]
[[13 16]]
guillaume@ubuntu:~/0x06$ python3 -m doctest ./tests/101-lazy_matrix_mul.txt 
guillaume@ubuntu:~/0x06$ 
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x06-python-test_driven_development
File: 101-lazy_matrix_mul.py, tests/101-lazy_matrix_mul.txt
  Done?  
Help!
8. CPython #3: Python Strings #advanced

Gif 

Create a function that prints Python strings.

Prototype: void print_python_string(PyObject *p);
Format: see example
If p is not a valid string, print an error message (see example)
Read: Unicode HOWTO
About:

Python version: 3.4
You are allowed to use the C standard library
Your shared library will be compiled with this command line: gcc -Wall -Wextra -pedantic -Werror -std=c99 -shared -Wl,-soname,libPython.so -o libPython.so -fPIC -I/usr/include/python3.4 102-python.c
julien@ubuntu:~/0x06. Pyhton Strings$ cat 102-tests.py
import ctypes

lib = ctypes.CDLL('./libPython.so')
lib.print_python_string.argtypes = [ctypes.py_object]
s = "The spoon does not exist"
lib.print_python_string(s)
s = "ложка не существует"
lib.print_python_string(s)
s = "La cuillère n'existe pas"
lib.print_python_string(s)
s = "勺子不存在"
lib.print_python_string(s)
s = "숟가락은 존재하지 않는다."
lib.print_python_string(s)
s = "スプーンは存在しない"
lib.print_python_string(s)
s = b"The spoon does not exist"
lib.print_python_string(s)
julien@ubuntu:~/0x06. Pyhton Strings$ gcc -Wall -Wextra -pedantic -Werror -std=c99 -shared -Wl,-soname,libPython.so -o libPython.so -fPIC -I/usr/include/python3.4 102-python.c
julien@ubuntu:~/0x06. Pyhton Strings$ python3 ./102-tests.py
[.] string object info
  type: compact ascii
  length: 24
  value: The spoon does not exist
[.] string object info
  type: compact unicode object
  length: 19
  value: ложка не существует
[.] string object info
  type: compact unicode object
  length: 24
  value: La cuillère n'existe pas
[.] string object info
  type: compact unicode object
  length: 5
  value: 勺子不存在
[.] string object info
  type: compact unicode object
  length: 14
  value: 숟가락은 존재하지 않는다.
[.] string object info
  type: compact unicode object
  length: 10
  value: スプーンは存在しない
[.] string object info
  [ERROR] Invalid String Object
julien@ubuntu:~/0x06. Pyhton Strings$ 
Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x06-python-test_driven_development
File: 102-python.c
