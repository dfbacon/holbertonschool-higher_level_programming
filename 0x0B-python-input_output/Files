Holberton School
My planning
My projects
My concepts
My batchmates
QA reviews I can make
My Captain's Logs
My Officers
My Speakers of the day
My Servers
My profile
You just released the optional tasks of this project. Have fun!
0x0B. Python - Input/Output
 Higher-level programming ― Python

 by Guillaume, Full stack engineer

 Ongoing project - started 02-02-2017, must end by 02-06-2017 (in 4 days) - you're 0% done.

 QA review fully automated.

Readme

7.2. Reading and Writing Files
8.7. Predefined Clean-up Actions
Files read until 11.4 Binary Files included
JSON encoder and decoder
Watch Learn to Program 8 : Reading / Writing Files
What you should learn from this project

At the end of this project you are expected to be able to explain to anyone, without the help of Google:

Why Python programming is awesome (don’t forget to tweet today, with the hashtag #pythoniscool :))
How to open a file
How to write text in a file
How to read the full content of a file
How to read a file line by line
How to move the cursor in a file
How to make sure a file is closed after using it
What is and how to use the with statement
What is JSON
What is serialization
What is deserialization
How to convert a Python data structure to a JSON string
How to convert a JSON string to a Python data structure
Requirements for Python scripts

Allowed editors: vi, vim, emacs
All your files will be interpreted/compiled on Ubuntu 14.04 LTS using python3 (version 3.4.3)
All your files should end with a new line
The first line of all your files should be exactly #!/usr/bin/python3
A README.md file, at the root of the folder of the project, is mandatory
Your code should use the PEP 8 style
All your files must be executable
The length of your files will be tested using wc
Requirements for Python test cases

Allowed editors: vi, vim, emacs
All your files should end with a new line
All your test files should be inside a folder tests
All your test files should be text files (extension: .txt)
All your tests should be executed by using this command: python3 -m doctest ./tests/*
All your modules should have a documentation (python3 -c 'print(__import__("my_module").__doc__)')
All your classes should have a documentation (python3 -c 'print(__import__("my_module").MyClass.__doc__)')
All your functions (inside and outside a class) should have a documentation (python3 -c 'print(__import__("my_module").my_function.__doc__)' and python3 -c 'print(__import__("my_module").MyClass.my_function.__doc__)')
We strongly encourage you to work together on test cases, so that you don't miss any edge case
Tasks
  Done?  
Help!
0. Read file mandatory

Write a function that reads a text file (UTF8) and prints it to stdout:

Prototype: def read_file(filename=""):
You must use the with statement
You don't need to manage file permission/file doesn't exist exceptions.
You are not allowed to import any module
guillaume@ubuntu:~/0x0B$ cat 0-main.py
#!/usr/bin/python3
read_file = __import__('0-read_file').read_file

read_file("my_file_0.txt")

guillaume@ubuntu:~/0x0B$ cat my_file_0.txt
Holberton School offers a truly innovative approach to education:
focus on building reliable applications and scalable systems, take on real-world challenges, collaborate with your peers. 

A school every software engineer would have dreamt of!
guillaume@ubuntu:~/0x0B$ ./0-main.py
Holberton School offers a truly innovative approach to education:
focus on building reliable applications and scalable systems, take on real-world challenges, collaborate with your peers. 

A school every software engineer would have dreamt of!
guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 0-read_file.py
  Done?  
Help!
1. Number of lines mandatory

Write a function that returns the number of lines of a text file:

Prototype: def number_of_lines(filename=""):
You must use the with statement
You don't need to manage file permission/file doesn't exist exceptions.
You are not allowed to import any module
guillaume@ubuntu:~/0x0B$ cat 1-main.py
#!/usr/bin/python3
number_of_lines = __import__('1-number_of_lines').number_of_lines

filename = "my_file_0.txt"
nb_lines = number_of_lines(filename)
print("{} has {:d} lines".format(filename, nb_lines))

guillaume@ubuntu:~/0x0B$ wc -l my_file_0.txt
4 my_file_0.txt
guillaume@ubuntu:~/0x0B$ ./1-main.py
my_file_0.txt has 4 lines
guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 1-number_of_lines.py
  Done?  
Help!
2. Read n lines mandatory

Write a function that reads n lines of a text file (UTF8) and prints it to stdout:

Prototype: def read_lines(filename="", nb_lines=0):
Read the entire file if nb_lines is lower or equal to 0 OR greater or equal to the total number of lines of the file
You must use the with statement
You don't need to manage file permission/file doesn't exist exceptions.
You are not allowed to import any module
guillaume@ubuntu:~/0x0B$ cat 2-main.py
#!/usr/bin/python3
read_lines = __import__('2-read_lines').read_lines

print("1 line:")
read_lines("my_file_0.txt", 1)
print("--")
print("3 lines:")
read_lines("my_file_0.txt", 3)
print("--")
print("Full content:")
read_lines("my_file_0.txt")

guillaume@ubuntu:~/0x0B$ cat my_file_0.txt
Holberton School offers a truly innovative approach to education:
focus on building reliable applications and scalable systems, take on real-world challenges, collaborate with your peers. 

A school every software engineer would have dreamt of!
guillaume@ubuntu:~/0x0B$ ./2-main.py
1 line:
Holberton School offers a truly innovative approach to education:
--
3 lines:
Holberton School offers a truly innovative approach to education:
focus on building reliable applications and scalable systems, take on real-world challenges, collaborate with your peers. 

--
Full content:
Holberton School offers a truly innovative approach to education:
focus on building reliable applications and scalable systems, take on real-world challenges, collaborate with your peers. 

A school every software engineer would have dreamt of!
guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 2-read_lines.py
  Done?  
Help!
3. Write to a file mandatory

Write a function that writes a string to a text file (UTF8) and returns the number of characters written:

Prototype: def write_file(filename="", text=""):
You must use the with statement
You don't need to manage file permission exceptions.
You are not allowed to import any module
guillaume@ubuntu:~/0x0B$ cat 3-main.py
#!/usr/bin/python3
write_file = __import__('3-write_file').write_file

nb_characters = write_file("my_first_file.txt", "Holberton School is so cool!\n")
print(nb_characters)

guillaume@ubuntu:~/0x0B$ ./3-main.py
29
guillaume@ubuntu:~/0x0B$ cat my_first_file.txt
Holberton School is so cool!
guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 3-write_file.py
  Done?  
Help!
4. Append to a file mandatory

Write a function that appends a string at the end of a text file (UTF8) and returns the number of characters added:

Prototype: def append_write(filename="", text=""):
If the file doesn't exist, it should be created
You must use the with statement
You don't need to manage file permission/file doesn't exist exceptions.
You are not allowed to import any module
guillaume@ubuntu:~/0x0B$ cat 4-main.py
#!/usr/bin/python3
append_write = __import__('4-append_write').append_write

nb_characters_added = append_write("file_append.txt", "Holberton School is so cool!\n")
print(nb_characters_added)

guillaume@ubuntu:~/0x0B$ cat file_append.txt
cat: file_append.txt: No such file or directory
guillaume@ubuntu:~/0x0B$ ./4-main.py
29
guillaume@ubuntu:~/0x0B$ cat file_append.txt
Holberton School is so cool!
guillaume@ubuntu:~/0x0B$ ./4-main.py
29
guillaume@ubuntu:~/0x0B$ cat file_append.txt
Holberton School is so cool!
Holberton School is so cool!
guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 4-append_write.py
  Done?  
Help!
5. To JSON string mandatory

Write a function that returns the JSON representation of an object (string):

Prototype: def to_json_string(my_obj):
You don't need to manage exceptions if the object can't be serialized.
guillaume@ubuntu:~/0x0B$ cat 5-main.py
#!/usr/bin/python3
to_json_string = __import__('5-to_json_string').to_json_string

my_list = [1, 2, 3]
s_my_list = to_json_string(my_list)
print(s_my_list)
print(type(s_my_list))

my_dict = { 
    'id': 12,
    'name': "John",
    'places': [ "San Francisco", "Tokyo" ],
    'is_active': True,
    'info': {
        'age': 36,
        'average': 3.14
    }
}
s_my_dict = to_json_string(my_dict)
print(s_my_dict)
print(type(s_my_dict))

try:
    my_set = { 132, 3 }
    s_my_set = to_json_string(my_set)
    print(s_my_set)
    print(type(s_my_set))
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

guillaume@ubuntu:~/0x0B$ ./5-main.py
[1, 2, 3]
<class 'str'>
{"id": 12, "is_active": true, "name": "John", "info": {"average": 3.14, "age": 36}, "places": ["San Francisco", "Tokyo"]}
<class 'str'>
[TypeError] {3, 132} is not JSON serializable
guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 5-to_json_string.py
  Done?  
Help!
6. From JSON string to Object mandatory

Write a function that returns an object (Python data structure) represented by a JSON string:

Prototype: def from_json_string(my_str):
You don't need to manage exceptions if the JSON string doesn't represent an object.
guillaume@ubuntu:~/0x0B$ cat 6-main.py
#!/usr/bin/python3
from_json_string = __import__('6-from_json_string').from_json_string

s_my_list = "[1, 2, 3]"
my_list = from_json_string(s_my_list)
print(my_list)
print(type(my_list))

s_my_dict = """
{"is_active": true, "info": {"age": 36, "average": 3.14}, 
"id": 12, "name": "John", "places": ["San Francisco", "Tokyo"]}
"""
my_dict = from_json_string(s_my_dict)
print(my_dict)
print(type(my_dict))

try:
    s_my_dict = """
    {"is_active": true, 12 }
    """
    my_dict = from_json_string(s_my_dict)
    print(my_dict)
    print(type(my_dict))
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

guillaume@ubuntu:~/0x0B$ ./6-main.py
[1, 2, 3]
<class 'list'>
{'id': 12, 'is_active': True, 'name': 'John', 'info': {'age': 36, 'average': 3.14}, 'places': ['San Francisco', 'Tokyo']}
<class 'dict'>
[ValueError] Expecting property name enclosed in double quotes: line 2 column 25 (char 25)
guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 6-from_json_string.py
  Done?  
Help!
7. Save Object to a file mandatory

Write a function that writes an Object to a text file, using a JSON representation:

Prototype: def save_to_json_file(my_obj, filemame):
You must use the with statement
You don't need to manage exceptions if the object can't be serialized.
You don't need to manage file permission exceptions.
guillaume@ubuntu:~/0x0B$ cat 7-main.py
#!/usr/bin/python3
save_to_json_file = __import__('7-save_to_json_file').save_to_json_file

filemame = "my_list.json"
my_list = [1, 2, 3]
save_to_json_file(my_list, filemame)

filemame = "my_dict.json"
my_dict = { 
    'id': 12,
    'name': "John",
    'places': [ "San Francisco", "Tokyo" ],
    'is_active': True,
    'info': {
        'age': 36,
        'average': 3.14
    }
}
save_to_json_file(my_dict, filemame)

try:
    filemame = "my_set.json"
    my_set = { 132, 3 }
    save_to_json_file(my_set, filemame)
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

guillaume@ubuntu:~/0x0B$ ./7-main.py
[TypeError] {3, 132} is not JSON serializable
guillaume@ubuntu:~/0x0B$ cat my_list.json ; echo ""
[1, 2, 3]
guillaume@ubuntu:~/0x0B$ cat my_dict.json ; echo ""
{"name": "John", "places": ["San Francisco", "Tokyo"], "id": 12, "info": {"average": 3.14, "age": 36}, "is_active": true}
guillaume@ubuntu:~/0x0B$ cat my_set.json ; echo ""

guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 7-save_to_json_file.py
  Done?  
Help!
8. Create object from a JSON file mandatory

Write a function that creates an Object from a "JSON file":

Prototype: def load_from_json_file(filemame):
You must use the with statement
You don't need to manage exceptions if the JSON string doesn't represent an object.
You don't need to manage file permissions / exceptions.
guillaume@ubuntu:~/0x0B$ cat 8-main.py
#!/usr/bin/python3
load_from_json_file = __import__('8-load_from_json_file').load_from_json_file

filemame = "my_list.json"
my_list = load_from_json_file(filemame)
print(my_list)
print(type(my_list))

filemame = "my_dict.json"
my_dict = load_from_json_file(filemame)
print(my_dict)
print(type(my_dict))

try:
    filemame = "my_set_doesnt_exist.json"
    my_set = load_from_json_file(filemame)
    print(my_set)
    print(type(my_set))
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

try:
    filemame = "my_fake.json"
    my_fake = load_from_json_file(filemame)
    print(my_fake)
    print(type(my_fake))
except Exception as e:
    print("[{}] {}".format(e.__class__.__name__, e))

guillaume@ubuntu:~/0x0B$ cat my_list.json ; echo ""
[1, 2, 3]
guillaume@ubuntu:~/0x0B$ cat my_dict.json ; echo ""
{"name": "John", "places": ["San Francisco", "Tokyo"], "id": 12, "info": {"average": 3.14, "age": 36}, "is_active": true}
guillaume@ubuntu:~/0x0B$ cat my_fake.json ; echo ""
{"is_active": true, 12 }
guillaume@ubuntu:~/0x0B$ ./8-main.py
[1, 2, 3]
<class 'list'>
{'name': 'John', 'info': {'age': 36, 'average': 3.14}, 'id': 12, 'places': ['San Francisco', 'Tokyo'], 'is_active': True}
<class 'dict'>
[FileNotFoundError] [Errno 2] No such file or directory: 'my_set_doesnt_exist.json'
[ValueError] Expecting property name enclosed in double quotes: line 1 column 21 (char 20)
guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 8-load_from_json_file.py
  Done?  
Help!
9. Load, add, save mandatory

Write a script that adds all arguments to a Python list, and then save them to a file:

You must use your function save_to_json_file from 7-save_to_json_file.py
You must use your function load_from_json_file from 8-load_from_json_file.py
The list must be saved as a JSON representation in a file named add_item.json
If the file doesn't exist, it should be created
You don't need to manage file permissions / exceptions.
guillaume@ubuntu:~/0x0B$ cat add_item.json
cat: add_item.json: No such file or directory
guillaume@ubuntu:~/0x0B$ ./9-add_item.py
guillaume@ubuntu:~/0x0B$ cat add_item.json ; echo ""
[]
guillaume@ubuntu:~/0x0B$ ./9-add_item.py Holberton School
guillaume@ubuntu:~/0x0B$ cat add_item.json ; echo ""
["Holberton", "School"]
guillaume@ubuntu:~/0x0B$ ./9-add_item.py 89 Python C
guillaume@ubuntu:~/0x0B$ cat add_item.json ; echo ""
["Holberton", "School", "89", "Python", "C"]
guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 9-add_item.py
  Done?  
Help!
10. Search and update #advanced

Write a function that inserts a line of text to a file, after each line containing a specific string (see example):

Prototype: def append_after(filename="", search_string="", new_string=""):
You must use the with statement
You don't need to manage file permission/file doesn't exist exceptions.
You are not allowed to import any module
guillaume@ubuntu:~/0x0B$ cat 100-main.py
#!/usr/bin/python3
append_after = __import__('100-append_after').append_after

append_after("append_after_100.txt", "Python", "\"C is fun!\"\n")

guillaume@ubuntu:~/0x0B$ cat append_after_100.txt
At Holberton School,
Python is really important,
But it can be very hard if:
- You don't get all Pythonic tricks
- You don't have strong C knowledge.
guillaume@ubuntu:~/0x0B$ ./100-main.py
guillaume@ubuntu:~/0x0B$ cat append_after_100.txt
At Holberton School,
Python is really important,
"C is fun!"
But it can be very hard if:
- You don't get all Pythonic tricks
"C is fun!"
- You don't have strong C knowledge.
guillaume@ubuntu:~/0x0B$ ./100-main.py
guillaume@ubuntu:~/0x0B$ cat append_after_100.txt
At Holberton School,
Python is really important,
"C is fun!"
"C is fun!"
But it can be very hard if:
- You don't get all Pythonic tricks
"C is fun!"
"C is fun!"
- You don't have strong C knowledge.
guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 100-append_after.py
  Done?  
Help!
11. Log parsing #advanced

Write a script that reads stdin line by line and computes metrics:

Input format: <IP Address> - [<date>] "GET /projects/260 HTTP/1.1" <status code> <file size>
Each 10 lines and after a keyboard interruption (CTRL + C), prints those statistics since the beginning:
Total file size: File size: <total size>
where is the sum of all previous (see input format above)
Number of lines by status code:
possible status code: 200, 301, 400, 401, 403, 404, 405 and 500
if a status code doesn't appear, don't print anything for this status code
format: <status code>: <number>
status codes should be printed in ascending order
guillaume@ubuntu:~/0x0B$ cat 101-generator.py
#!/usr/bin/python3
import random
import sys
from time import sleep
import datetime

for i in range(10000):
    sleep(random.random())
    sys.stdout.write("{:d}.{:d}.{:d}.{:d} - [{}] \"GET /projects/260 HTTP/1.1\" {} {}\n".format(
        random.randint(1, 255), random.randint(1, 255), random.randint(1, 255), random.randint(1, 255),
        datetime.datetime.now(),
        random.choice([200, 301, 400, 401, 403, 404, 405, 500]),
        random.randint(1, 1024)
    ))
    sys.stdout.flush()

guillaume@ubuntu:~/0x0B$ ./101-generator.py | ./101-stats.py 
File size: 5213
200: 2
401: 1
403: 2
404: 1
405: 1
500: 3
File size: 11320
200: 3
301: 2
400: 1
401: 2
403: 3
404: 4
405: 2
500: 3
File size: 16305
200: 3
301: 3
400: 4
401: 2
403: 5
404: 5
405: 4
500: 4
^CFile size: 17146
200: 4
301: 3
400: 4
401: 2
403: 6
404: 6
405: 4
500: 4
Traceback (most recent call last):
  File "./101-stats.py", line 15, in <module>
Traceback (most recent call last):
  File "./101-generator.py", line 8, in <module>
    for line in sys.stdin:
KeyboardInterrupt
    sleep(random.random())
KeyboardInterrupt
guillaume@ubuntu:~/0x0B$ 
No test cases needed

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: 101-stats.py
  Done?  
Help!
12. Hack the VM #advanced

Write a script that finds a string in the heap of a running process, and replaces it.

Read The /proc filesystem
Usage: read_write_heap.py pid search_string replace_string
where pid is the pid of the running process
and strings are ASCII
The script should look only in the heap of the process
Output: you can print whatever you think is interesting
On usage error, print an error message on stdout and exit with status code 1

Repo:

GitHub repository: holbertonschool-higher_level_programming
Directory: 0x0B-python-input_output
File: read_write_heap.py
